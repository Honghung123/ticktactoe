<div class="wrapper-login">
    <div class="logo">
        <img class="avatar"
            src="https://play-lh.googleusercontent.com/zPxLgj5nvl20ahJV7aFC6S5mD8kii5CEEDj25j1P9CYAfXL9sdDuO-8eES0r4DhJHrU"
            alt="">
    </div>
    <div class="text-center mt-4 name">
        Login
    </div>
    <form class="p-3 mt-3" action="/login" method="POST" id="form-login">
        <div class="form-field">
            <span class="form-label">Username: </span>
            <input type="text" name="username" id="username" placeholder="Enter your username" required>
            <i class="error text-danger">Username must be not empty</i>
        </div>
        <div class="form-field">
            <span class="form-label">Password: </span>
            <input type="password" name="password" id="password" placeholder="Enter your password" required> 
        </div>
        <button class="btn mt-5 fs-5">Login</button>
    </form>
    <div class="text-center fs-6  text-black">
        <span>Dont have account? </span><a class="fs-6 fw-bold" href="/register">Sign up</a>
    </div>
</div>
{{> footer }}
{{> script }}
<script>
    $(() => {
        async function isUserExists(username) {
            let result = {};
            await fetch(`/user-validate`, {
                method: "post",
                body: JSON.stringify({username : username}),
            })
                .then(data => data.json())
                .then(data => { result = data; })
                .catch(err => { result = {}; });
            return result;
        }

        async function isUserExist(username) { 
            try {
                const response = await fetch(`/user-validate`, {
                    method: "post",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ username })
                });
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                const data = await response.json(); 
                return data;
            } catch (err) {
                console.error("Error:", err);
                return {};
            }
        }
        $("#username").on('blur', async function(e){
            const value = e.target.value; 
            const usernameRgx = /^[a-zA-Z][a-zA-Z0-9]{2,}$/
            if (!value.match(usernameRgx)) {
                $(".error").text("Username phải có ít nhất 3 kí tự");
                $(".error").css('visibility', 'visible')
            }
            else {
                const result = await isUserExist(value);
                if (result.code == 400) {
                    $(".error").text(result.message);
                    $(".error").css('visibility', 'visible')
                } else {
                    $(".error").text("");
                    $(".error").css('visibility', 'hidden')
                }
            }
        });
        $("#username").on('focus', async function (e) { 
            $(".error").css('visibility', 'hidden')
        })
        $("#form-login").on('submit', async function (e) {
            e.preventDefault();
            let isValid = false;
            const username = $("#username").val();
            const usernameRgx = /^[a-zA-Z][a-zA-Z0-9]{2,}$/
            if (!username.match(usernameRgx)) { 
                $(".error").text("Username phải có ít nhất 3 kí tự");
                $(".error").css('visibility', 'visible')
            }
            else{
                const result = await isUserExist(username);
                if (result.code == 400) {
                    $(".error").text(result.message);
                    $(".error").css('visibility', 'visible')
                }else{
                    $(".error").text("");
                    $(".error").css('visibility', 'hidden')
                    isValid = true;
                }
            }
            if(isValid){ 
                e.target.submit();
            }
        })
    })
</script>